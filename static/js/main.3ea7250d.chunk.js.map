{"version":3,"sources":["Api.js","App.js","serviceWorker.js","index.js"],"names":["updateQ","id","details","localStorage","setItem","JSON","stringify","updateIds","updateFn","ids","getQIds","getItem","parse","actions","GET","type","UPDATE","CREATE","DELETE","initState","reducer","state","_ref","Object","objectSpread","defineProperty","api","newId","Math","floor","random","Number","MAX_SAFE_INTEGER","toString","concat","toConsumableArray","removeItem","undefined","DispatchCtx","createContext","AppBar","react_default","a","createElement","Link","to","className","QPreview","_ref4","question","answer","QView","_ref5","history","dispatch","useContext","_useState","useState","_useState2","slicedToArray","setQuestion","_useState3","_useState4","setAnswer","isNew","someChanges","placeholder","value","onChange","e","target","onClick","push","QCreate","props","assign","App","_useReducer","useReducer","_useReducer2","useEffect","forEach","Switch","Route","exact","path","render","entries","map","_ref2","_ref3","key","match","params","isInteger","parseInt","Provider","Redirect","RedirectableQCreate","withRouter","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","BrowserRouter","basename","src_App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3ea7250d.chunk.js","sourcesContent":["export function getQ(id) {\n  return JSON.parse(localStorage.getItem(id));\n}\n\nexport function updateQ(id, details) {\n  localStorage.setItem(id, JSON.stringify(details));\n}\n\nfunction updateIds(updateFn) {\n  const ids = getQIds();\n  localStorage.setItem(\"ids\", JSON.stringify(updateFn(ids)));\n}\n\nexport function addId(id) {\n  updateIds(ids => [...ids, id]);\n}\n\nexport function removeId(id) {\n  updateIds(ids => ids.filter(x => x !== id));\n}\n\nexport function deleteQ(id) {\n  localStorage.removeItem(id);\n}\n\nexport function getQIds() {\n  const ids = localStorage.getItem(\"ids\");\n  return ids ? JSON.parse(ids) : [];\n}\n","import React, { useEffect, useState, useReducer, useContext, createContext } from \"react\";\nimport { Route, Switch, Redirect, Link, withRouter } from \"react-router-dom\";\nimport * as api from \"./Api\";\nimport \"./App.css\";\n\nconst actions = {\n  GET: id => ({ type: \"GET\", id }),\n  UPDATE: (id, details) => ({ type: \"UPDATE\", id, details }),\n  CREATE: details => ({ type: \"CREATE\", details }),\n  DELETE: id => ({ type: \"DELETE\", id }),\n};\n\nconst initState = {};\nfunction reducer(state, { type, id, details }) {\n  switch (type) {\n    case \"GET\":\n      // get Q from localStorage\n      return { ...state, [id]: api.getQ(id) };\n    case \"UPDATE\":\n      // update an existing Q\n      api.updateQ(id, details);\n      return { ...state, [id]: details };\n    case \"CREATE\":\n      // create a new Q\n      const newId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString();\n\n      api.updateQ(newId, details);\n      api.addId(newId);\n      return { ...state, [newId]: details };\n    case \"DELETE\":\n      // delete a Q\n      api.deleteQ(id);\n      return { ...state, [id]: undefined };\n    default:\n      return initState;\n  }\n}\n\nconst DispatchCtx = createContext();\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, initState);\n\n  // populate local storage at mount time\n  useEffect(() => {\n    api.getQIds().forEach(id => {\n      dispatch(actions.GET(id));\n    });\n  }, []);\n\n  return (\n    <div className=\"app-body\">\n      <AppBar />\n      <Switch>\n        <Route\n          exact\n          path=\"/\"\n          render={() => (\n            <div className=\"questions\">\n              {Object.entries(state).map(([id, details]) => (\n                <QPreview key={id} details={{ id, ...details }} />\n              ))}\n            </div>\n          )}\n        />\n        <Route\n          path=\"/q/:id\"\n          render={props => {\n            let { id } = props.match.params;\n            if (!Number.isInteger((id = parseInt(id))) || state[id] === undefined) {\n              return <Redirect to=\"/\" />;\n            }\n\n            return (\n              <DispatchCtx.Provider value={dispatch}>\n                <QView details={{ id, ...state[id] }} />\n              </DispatchCtx.Provider>\n            );\n          }}\n        />\n        <Route\n          path=\"/new\"\n          render={() => {\n            const RedirectableQCreate = withRouter(QCreate);\n            return (\n              <DispatchCtx.Provider value={dispatch}>\n                <RedirectableQCreate />\n              </DispatchCtx.Provider>\n            );\n          }}\n        />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nfunction AppBar() {\n  return (\n    <header>\n      <Link to=\"/\">\n        <h2 className=\"app-title\">My FAQ</h2>\n      </Link>\n      <Link to=\"/new\">\n        <button className=\"add-button\">+</button>\n      </Link>\n    </header>\n  );\n}\n\nfunction QPreview({ details }) {\n  return (\n    <div className=\"q-preview\">\n      <Link to={`/q/${details.id}`}>\n        <h3>{details.question}</h3>\n      </Link>\n      <span>{details.answer}</span>\n    </div>\n  );\n}\n\nfunction QView({ details, history }) {\n  const dispatch = useContext(DispatchCtx);\n  const [question, setQuestion] = useState(details.question || \"\");\n  const [answer, setAnswer] = useState(details.answer || \"\");\n  const isNew = !details.id;\n  const someChanges = details.question !== question || details.answer !== answer;\n\n  return (\n    <div className=\"q-view\">\n      <textarea\n        className=\"q-question\"\n        placeholder=\"question...\"\n        value={question}\n        onChange={e => {\n          setQuestion(e.target.value);\n        }}\n      />\n      <textarea\n        className=\"q-answer\"\n        placeholder=\"answer...\"\n        value={answer}\n        onChange={e => {\n          setAnswer(e.target.value);\n        }}\n      />\n      {someChanges ? (\n        <button\n          className=\"q-save\"\n          onClick={() => {\n            if (isNew) {\n              dispatch(actions.CREATE({ question, answer }));\n              history.push(\"/\");\n            } else {\n              dispatch(actions.UPDATE(details.id, { question, answer }));\n            }\n          }}\n        >\n          {isNew ? \"Add\" : \"Save\"}\n        </button>\n      ) : (\n        undefined\n      )}\n    </div>\n  );\n}\n\nfunction QCreate(props) {\n  return <QView details={{}} {...props} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/my-faq\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}